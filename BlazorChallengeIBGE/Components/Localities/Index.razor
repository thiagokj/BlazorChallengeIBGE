@page "/localities"
@using Microsoft.AspNetCore.Components.QuickGrid
@rendermode InteractiveServer
@inject ApplicationDbContext Context
@inject NavigationManager Navigation

<h1>Cidades</h1>

<div class="items-per-page">
  <a href="/localities/create" class="btn btn-primary">Nova Cidade</a>

  <div class="page-size-chooser">
    <span>Itens por página:</span>
    <select class="form-select custom-select-sm" @bind="@pagination.ItemsPerPage">
      <option>1</option>
      <option>10</option>
    </select>
  </div>
</div>


@if (!Localities.Any())
{
  <p class="text-center">
    <em>Carregando as cidades...</em>
  </p>
}
else
{

  <div class="grid">
    <QuickGrid Items="@Localities.AsQueryable()"
               Pagination="@pagination"
               class="table table-grid">

      <PropertyColumn Property="@(item => item.IbgeCode)"
                      Title="IBGE" Sortable="true" Align="Align.Left" />

      <PropertyColumn Property="@(item => item.State)"
                      Title="Estado" Sortable="true" Align="Align.Left" />

      <PropertyColumn Property="@(item => item.City)"
                      Title="Cidade" Sortable="true" Align="Align.Left" />

      <TemplateColumn Title="Ações">
        <button class="btn btn-primary button-spacing" @onclick="@(() => Edit(context))">Editar</button>
        <button class="btn btn-danger button-spacing" @onclick="@(() => Delete(context))">Excluir</button>
      </TemplateColumn>
    </QuickGrid>
  </div>



  <div class="page-buttons">
    Página:
    @if (pagination.TotalItemCount.HasValue)
    {
      for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
      {
        var capturedIndex = pageIndex;
        <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                class="@PageButtonClass(capturedIndex)"
                aria-current="@AriaCurrentValue(capturedIndex)"
                aria-label="Go to page @(pageIndex + 1)">
          @(pageIndex + 1)
        </button>
      }
    }
  </div>
}

@code {

  public IEnumerable<Locality> Localities { get; set; } = Enumerable.Empty<Locality>();

  public void Edit(Locality l) => Navigation.NavigateTo($"/localities/edit/{l.Id}");

  public void Delete(Locality l) => Navigation.NavigateTo($"/localities/delete/{l.Id}");

  PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

  private async Task GoToPageAsync(int pageIndex)
    => await pagination.SetCurrentPageIndexAsync(pageIndex);

  private string? PageButtonClass(int pageIndex)
    => pagination.CurrentPageIndex == pageIndex ? "current" : null;

  private string? AriaCurrentValue(int pageIndex)
    => pagination.CurrentPageIndex == pageIndex ? "page" : null;

  protected override async Task OnInitializedAsync()
  {
    Localities = await Context
        .Localities
        .AsNoTracking()
        .ToListAsync();

    pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
  }
}
